// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: manager.proto

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Registration_RegisterService_FullMethodName     = "/hub.Registration/RegisterService"
	Registration_DeregisterService_FullMethodName   = "/hub.Registration/DeregisterService"
	Registration_ShutdownService_FullMethodName     = "/hub.Registration/ShutdownService"
	Registration_StartService_FullMethodName        = "/hub.Registration/StartService"
	Registration_RestartService_FullMethodName      = "/hub.Registration/RestartService"
	Registration_GetAllServices_FullMethodName      = "/hub.Registration/GetAllServices"
	Registration_GetServiceByName_FullMethodName    = "/hub.Registration/GetServiceByName"
	Registration_GetServiceByAddress_FullMethodName = "/hub.Registration/GetServiceByAddress"
	Registration_GetServiceByStatus_FullMethodName  = "/hub.Registration/GetServiceByStatus"
)

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationClient interface {
	RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	DeregisterService(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error)
	ShutdownService(ctx context.Context, in *ShutdownServiceRequest, opts ...grpc.CallOption) (*ShutdownServiceResponse, error)
	StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceResponse, error)
	RestartService(ctx context.Context, in *RestartServiceRequest, opts ...grpc.CallOption) (*RestartServiceResponse, error)
	GetAllServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllServicesResponse, error)
	GetServiceByName(ctx context.Context, in *GetServiceByNameRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	GetServiceByAddress(ctx context.Context, in *GetServiceByAddressRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	GetServiceByStatus(ctx context.Context, in *GetServiceByStatusRequest, opts ...grpc.CallOption) (*GetServicesByStatusResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) RegisterService(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Registration_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeregisterService(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeregisterResponse)
	err := c.cc.Invoke(ctx, Registration_DeregisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ShutdownService(ctx context.Context, in *ShutdownServiceRequest, opts ...grpc.CallOption) (*ShutdownServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownServiceResponse)
	err := c.cc.Invoke(ctx, Registration_ShutdownService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) StartService(ctx context.Context, in *StartServiceRequest, opts ...grpc.CallOption) (*StartServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartServiceResponse)
	err := c.cc.Invoke(ctx, Registration_StartService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RestartService(ctx context.Context, in *RestartServiceRequest, opts ...grpc.CallOption) (*RestartServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartServiceResponse)
	err := c.cc.Invoke(ctx, Registration_RestartService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetAllServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllServicesResponse)
	err := c.cc.Invoke(ctx, Registration_GetAllServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetServiceByName(ctx context.Context, in *GetServiceByNameRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, Registration_GetServiceByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetServiceByAddress(ctx context.Context, in *GetServiceByAddressRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, Registration_GetServiceByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetServiceByStatus(ctx context.Context, in *GetServiceByStatusRequest, opts ...grpc.CallOption) (*GetServicesByStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesByStatusResponse)
	err := c.cc.Invoke(ctx, Registration_GetServiceByStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
// All implementations must embed UnimplementedRegistrationServer
// for forward compatibility.
type RegistrationServer interface {
	RegisterService(context.Context, *RegisterRequest) (*RegisterResponse, error)
	DeregisterService(context.Context, *DeregisterRequest) (*DeregisterResponse, error)
	ShutdownService(context.Context, *ShutdownServiceRequest) (*ShutdownServiceResponse, error)
	StartService(context.Context, *StartServiceRequest) (*StartServiceResponse, error)
	RestartService(context.Context, *RestartServiceRequest) (*RestartServiceResponse, error)
	GetAllServices(context.Context, *emptypb.Empty) (*GetAllServicesResponse, error)
	GetServiceByName(context.Context, *GetServiceByNameRequest) (*GetServiceResponse, error)
	GetServiceByAddress(context.Context, *GetServiceByAddressRequest) (*GetServiceResponse, error)
	GetServiceByStatus(context.Context, *GetServiceByStatusRequest) (*GetServicesByStatusResponse, error)
	mustEmbedUnimplementedRegistrationServer()
}

// UnimplementedRegistrationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistrationServer struct{}

func (UnimplementedRegistrationServer) RegisterService(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedRegistrationServer) DeregisterService(context.Context, *DeregisterRequest) (*DeregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterService not implemented")
}
func (UnimplementedRegistrationServer) ShutdownService(context.Context, *ShutdownServiceRequest) (*ShutdownServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownService not implemented")
}
func (UnimplementedRegistrationServer) StartService(context.Context, *StartServiceRequest) (*StartServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartService not implemented")
}
func (UnimplementedRegistrationServer) RestartService(context.Context, *RestartServiceRequest) (*RestartServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedRegistrationServer) GetAllServices(context.Context, *emptypb.Empty) (*GetAllServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (UnimplementedRegistrationServer) GetServiceByName(context.Context, *GetServiceByNameRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByName not implemented")
}
func (UnimplementedRegistrationServer) GetServiceByAddress(context.Context, *GetServiceByAddressRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByAddress not implemented")
}
func (UnimplementedRegistrationServer) GetServiceByStatus(context.Context, *GetServiceByStatusRequest) (*GetServicesByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceByStatus not implemented")
}
func (UnimplementedRegistrationServer) mustEmbedUnimplementedRegistrationServer() {}
func (UnimplementedRegistrationServer) testEmbeddedByValue()                      {}

// UnsafeRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServer will
// result in compilation errors.
type UnsafeRegistrationServer interface {
	mustEmbedUnimplementedRegistrationServer()
}

func RegisterRegistrationServer(s grpc.ServiceRegistrar, srv RegistrationServer) {
	// If the following call pancis, it indicates UnimplementedRegistrationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Registration_ServiceDesc, srv)
}

func _Registration_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterService(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_DeregisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeregisterService(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ShutdownService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ShutdownService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_ShutdownService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ShutdownService(ctx, req.(*ShutdownServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_StartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).StartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_StartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).StartService(ctx, req.(*StartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_RestartService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RestartService(ctx, req.(*RestartServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_GetAllServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetAllServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetServiceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetServiceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_GetServiceByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetServiceByName(ctx, req.(*GetServiceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetServiceByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetServiceByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_GetServiceByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetServiceByAddress(ctx, req.(*GetServiceByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetServiceByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetServiceByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registration_GetServiceByStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetServiceByStatus(ctx, req.(*GetServiceByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registration_ServiceDesc is the grpc.ServiceDesc for Registration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hub.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _Registration_RegisterService_Handler,
		},
		{
			MethodName: "DeregisterService",
			Handler:    _Registration_DeregisterService_Handler,
		},
		{
			MethodName: "ShutdownService",
			Handler:    _Registration_ShutdownService_Handler,
		},
		{
			MethodName: "StartService",
			Handler:    _Registration_StartService_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _Registration_RestartService_Handler,
		},
		{
			MethodName: "GetAllServices",
			Handler:    _Registration_GetAllServices_Handler,
		},
		{
			MethodName: "GetServiceByName",
			Handler:    _Registration_GetServiceByName_Handler,
		},
		{
			MethodName: "GetServiceByAddress",
			Handler:    _Registration_GetServiceByAddress_Handler,
		},
		{
			MethodName: "GetServiceByStatus",
			Handler:    _Registration_GetServiceByStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
