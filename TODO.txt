1) Implement endpoint to update user profile - DONE
2) Implement functions to login and update tables
3) Create unit tests
4) Create integration tests
5) Fix endpoints to support / at end or no /
6) Improve response body returned. Create a builder for it - DONE
7) Alter user audit log to track ip of the request - NOT NEEDED
8) For security after development, SSL on the springboot application, kafka, db and custom api - FINAL
9) Create Quartz job to get gold price - DONE
10) Enable vault for secrets - DONE

notification-service - DONE
transaction-service - TODO
report-service - TODO
email-service - DONE
authentication-service - TODO
holdings-service - TODO

Issues/Enhancements:
- User not able to update profile details, only user account details
- If user email is updated, updated email is sent to new email not old - DONE
- Emails sent should use an HTML template - Thymeleaf
- When catching exceptions, throw specific exceptions not general ones
- Kafka producer to be able to send any object
- Check all pom.xml and remove unused dependency and separate test and runtimes
- Batch Process adds duplicate dates for gold price history - BUG
- batch service, maybe use JPA instead of JDBCTemplate?
- If processed file exists in table, do not run batch import until the table is cleared - add new column for table affected default null
- have url constants in own class - for each controller
- add swagger docs for endpoints

Linked hashmap maintains the order in which keys are inserted

Performance Testing:
- VisualVM
- Apache JMeter

Can be analysed after above is complete:
- DB Indexes
- Caching
- Kafka Configurations(with and without SSL)

Refactor:
pricing-service

@ServiceConnect - applies connection details to spring automatically
@Container - restarts the container for each instance needed i.e. per test class