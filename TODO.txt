1) Implement endpoint to update user profile - DONE
2) Implement functions to login and update tables
3) Create unit tests
4) Create integration tests
5) Fix endpoints to support / at end or no /
6) Improve response body returned. Create a builder for it - DONE
7) Alter user audit log to track ip of the request - NOT NEEDED
8) For security after development, SSL on the springboot application, kafka, db and custom api - FINAL
9) Create Quartz job to get gold price - DONE
10) Enable vault for secrets - DONE

notification-service - DONE
transaction-service - TODO
report-service - TODO
email-service - DONE
authentication-service - TODO
holdings-service - TODO - spring batch

Issues/Enhancements:
- User not able to update profile details, only user account details - DONE
- If user email is updated, updated email is sent to new email not old - DONE
- Emails sent should use an HTML template - Thymeleaf
- When catching exceptions, throw specific exceptions not general ones - WIP
- Kafka producer to be able to send any object
- Check all pom.xml and remove unused dependency and separate test and runtimes
- Batch Process adds duplicate dates for gold price history - BUG
- batch service, maybe use JPA instead of JDBCTemplate?
- If processed file exists in table, do not run batch import until the table is cleared - add new column for table affected default null
- have url constants in own class - for each controller - DONE
- add swagger docs for endpoints
- When notification service checks if user id exists to add a notification. No check to see if account is active/has push notifications enabled - DONE
- Different profiles, testing, dev and prod
- Update docker to expose specific ports
- Remove hardcoded data references in custom-api, move to database - DONE
- Add active flag to data sources, depending which is active is the one open feign will use, if all inactive/more than one active, default to uk investing - DONE
- Implement Kafka Avro to send email objects to email-service.
- Implement Hazelcast to share information required for other services - DONE
- Remove hardcoded reference for cron jobs - DONE
- Add UUID to all kafka messages being send, check in hazelcast map, create new method to generate message+id and another to remove it if it hasnt been processed - DONE
Linked hashmap maintains the order in which keys are inserted
-Add failover mechanism upon failed retries to read from db if hazelcast is down. Same for kafka - DONE for kafka, WIP for hazelcast
-Fix issue with wrong UTC being inserted, its one hour behind
-Create db users for each microservice, control operations on tables and which can be seen
-Handle user adding investment on purchase date older than gold data available - ENHANCEMENT
-Fix issue of fallback hazelcast instance being created when main cluster is up and switching - BUG
-Fix issue of kafka health monitor getting wrong status - BUG
-Add rollback upon an error in code, do this when upgrading exception handling - DONE
-Enhancement/Improvements to gold creation methods needed
-Bug in calling http endpoints
-Need to improve endpoint names - DONE
-Simplify investment creation logic once code is working and complete
-Update gateway service to refer to eureka service names instead of hard coded host in feign calls by services
-Improve exception handling, in classes with transaction to return info, controller advice and no generic exceptions
-create a reporting service to generate holding performance, transaction reports, can also allow users to export gold type price information and generate report graphs too using python?
- as types price update, send id and price via kafka to update it in real time in investment service
- create a graph of investment over time or something, create a new python program to consume and generate graphs and render it to someplace
-create different user with roles and permissions for each microservice
-Use @NotBlank when doing checks for creating new objects
Performance Testing:
- VisualVM
- Apache JMeter

Can be analysed after above is complete:
- DB Indexes
- Caching
- Kafka Configurations(with and without SSL)

Refactor:
pricing-service

@ServiceConnect - applies connection details to spring automatically
@Container - restarts the container for each instance needed i.e. per test class